#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №8. Реализация планировщика команд.

**Цель:** Реализация длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Сделать возможным в потоке выполнять длительные операции.

## Задание.
Пусть, в условиях практической работы №7, у нас есть поток с очередью, который в цикле извлекает команды из очереди и выполняет их.

Некоторые из команд не могут выполнить всю работу за один вызов метода Execute без блокирования на длительное время выполнения всех остальных командд из очереди.

Например, если какая-нибудь сетевая игра представлена командой, то пока одна игра не закончится, следующая не начнется. Чтобы эффективнее использовать процессорные
можности, нужно обеспечить возхможность поиграть как можно большему количеству игроков.

Для этого используют режим псевдопараллельной обработки. Когда все время работы разбивают на небольшие отрезки, каждый из которых выполняется
за один вызов метода Execute. Чтобы выполнить всю работу, нужно вызвать метод Execute несколько раз, до тех пор пока работа не будет завершена.
Это позволяет между вызовами Execute одного экземплыра команды вызывать метод Execute других команд.

Так устроен, например, ренедринг страницы в браузере. Только в браузеоре это используется не для рендеренга всех вкладок, а для обработки 
реакций пользователя на странице.

В прошлой работе все команды, которые выполнялись в потоке, брались из очереди. Поэтому первая идея - это положить долгоиграющую операцию обратно в очередь.
Но это может привести к состоянию мертвой блокировки потока: если очередь будет полна, то поток, который попытается сделать запись, будет заблокирован до тех пор, 
пока в очереди не появится свободное место. Поэтому нельзя в одном и том же потоке читать и писать в очередь неблокируемым образом.

Чтобы избежать мертвой блокировки потока, необходимо ввести понятие Планировщика, который будет отвечать за выбор следующей длительной задачи для выполнения,
а чтение из очереди оставить только для новых операций. 

#!csharp

public interface ICommand
{
    void Execute();
    int WorkLeft();
}



public interface IScheduler
{
    bool HasCommand();
    ICommand Select();
    void Add(ICommand cmd);
}

#!markdown

Необходимо реализовать поток, который способен реализоввывать длительные операции.

**Указание.** 
1. В практической работе №7 из очереди команды извлекались блокируеммым образом с помощью метода Take(), при наличии планировщика так делать нельзя: поток
может заснуть несмотря на наличие команд в планировщике до тех пор, пока не будет записана новая команда в очередь.

С другой стороны, если будем всегда читать неблокируемым образом, а в планировщике нет никакой работы, то будем тратить процессорное время без полезной нагрузки.

Необходимо учесть этот момент при реализации очереди.

2. Для обепечения справедливости стратегии планировщика в слабом смысле использовать стратегию Round Robbin (циклическую) для определения следующего потока на исполнение.

#!csharp

using System.Threading;

class CommandOne : ICommand{
    public int work_left = 1;
    public void Execute(){
        Thread.Sleep(500);
        Console.WriteLine("Executed CommandOne");
        work_left--;
    }
    public int WorkLeft(){
        return work_left;
    }

}

class CommandTwo : ICommand{
    public int work_left = 5;
    public void Execute(){
        Thread.Sleep(300);
        Console.WriteLine("Executed CommandTwo");
        work_left--;
    }
    public int WorkLeft(){
        return work_left;
    }

}

class CommandLong : ICommand{
    public int work_left = 10;
    public void Execute(){
        Thread.Sleep(300);
        Console.WriteLine("Executed CommandLong");
        work_left--;
    }
    public int WorkLeft(){
        return work_left;
    }

}

class HardStop : ICommand{
    public int work_left = 1;
    public void Execute(){
        Console.WriteLine("Executed HardStop");
        work_left--;
    }
    public int WorkLeft(){
        return work_left;
    }

}

class SoftStop : ICommand{
    public int work_left = 1;
    public void Execute(){
        Console.WriteLine("Executed SoftStop");
        work_left--;
    }
    public int WorkLeft(){
        return work_left;
    }
}

class CommandError : ICommand{
    public int work_left = 1;
    public void Execute(){
        Thread.Sleep(100);
        work_left--;
        throw new Exception ("Test Error");
    }
    public int WorkLeft(){
        return work_left;
    }
}

#!csharp

using System.Collections.Concurrent;

class Scheduler : IScheduler{
    BlockingCollection<ICommand> tasks = new BlockingCollection<ICommand>();
    public bool HasCommand(){
        return (tasks.Count > 0);
    }
    public ICommand Select(){
        return tasks.Take();
    }
    public void Add(ICommand cmd){
        tasks.Add(cmd);
    }
}

#!csharp

using System.Threading;
using System.Collections.Concurrent;

delegate void Handler (ICommand com, Exception exc);
Handler ExceptionHandler = (ICommand com, Exception exc) => Console.WriteLine($"Ошибка выполения команды {com.GetType().Name}");

class ServerThread{
    public BlockingCollection<ICommand> queue;
    Handler ExceptionHandler;
    Scheduler sh = new Scheduler();
    bool need_delivery = true;
    public ServerThread(ref BlockingCollection<ICommand> queue, Handler ExceptionHandler){
        this.queue = queue;
        this.ExceptionHandler = ExceptionHandler;
    }

    void DeliveryThread(){
        Thread d = new Thread(new ThreadStart(() => {
            while (need_delivery){
                sh.Add(queue.Take());
            }
        }));
        d.Start();
    }

    public void Loop(){
        DeliveryThread();
        string c_name;
        ICommand c;
        bool target_soft_stop = false;
        while (true){
            c = sh.Select();
            try{c.Execute();}
            catch (Exception ex){ExceptionHandler(c, ex);}
            c_name = c.GetType().Name;
            if (c_name == "HardStop"){break;}
            if (c_name == "SoftStop"){target_soft_stop = true;}
            if (target_soft_stop) {
                if ((queue.Count == 0) && !sh.HasCommand()) {Console.WriteLine("SoftStop"); break;}
            }
            if (c.WorkLeft() != 0){
                sh.Add(c);
            }
        }
        need_delivery = false;
        
    }
}

#!csharp

BlockingCollection<ICommand> q1 = new BlockingCollection<ICommand>(); 
ServerThread s1 = new ServerThread(ref q1, ExceptionHandler);
q1.Add(new CommandOne());
q1.Add(new CommandTwo());
q1.Add(new CommandLong());
Thread th1 = new Thread(new ThreadStart(s1.Loop));
th1.Start();
Thread.Sleep(9000);
q1.Add(new CommandOne());
q1.Add(new SoftStop());
q1.Add(new CommandOne());
th1.Join();
Console.WriteLine($"После остановки потока, в очереди осталось {q1.Count()} команд");
